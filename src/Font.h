#ifndef FONT_H
#define FONT_H

struct character {
    char character;
    uint8_t ascii_code;
    byte definition[7];
    unsigned short int definition_total_bytes;
};

character findCorrespondingByte(uint8_t ascii_code);

const character characters[] PROGMEM = {
    character{'?', 0x3f, {0x2, 0x1, 0x51, 0x9, 0x6}, 5}, // NOTE: Please do not move question mark from the first (0) :D position. (Developers life depends on it baby)
    character{'A', 0x41, {0x7c, 0x12, 0x11, 0x12, 0x7c}, 5},
    character{'B', 0x42, {0x7F, 0x49, 0x49, 0x49, 0x36}, 5},
    character{'C', 0x43, {0x3e, 0x41, 0x41, 0x41, 0x22}, 5},
    character{'D', 0x44, {0x7f, 0x41, 0x41, 0x41, 0x3e}, 5},
    character{'E', 0x45, {0x7f, 0x49, 0x49, 0x49, 0x41}, 5},
    character{'F', 0x46, {0x7f, 0x9, 0x9, 0x9, 0x1}, 5},
    character{'G', 0x47, {0x3e, 0x41, 0x49, 0x49, 0x3a}, 5},
    character{'H', 0x48, {0x7f, 0x8, 0x8, 0x8, 0x7f}, 5},
    character{'I', 0x49, {0x7f}, 1},
    character{'J', 0x4a, {0x30, 0x40, 0x40, 0x40, 0x3f}, 5},
    character{'K', 0x4b, {0x7f, 0x8, 0x8, 0x14, 0x63}, 5},
    character{'L', 0x4c, {0x7f, 0x40, 0x40, 0x40, 0x40}, 5},
    character{'M', 0x4d, {0x7f, 0x6, 0xc, 0x6, 0x7f}, 5},
    character{'N', 0x4e, {0x7f, 0x4, 0x8, 0x10, 0x7f}, 5},
    character{'O', 0x4f, {0x3e, 0x41, 0x41, 0x41, 0x3e}, 5},
    character{'P', 0x50, {0x7f, 0x9, 0x9, 0x9, 0x6}, 5},
    character{'Q', 0x51, {0x3e, 0x41, 0x51, 0x61, 0x7e}, 5},
    character{'R', 0x52, {0x7f, 0x9, 0x19, 0x29, 0x46}, 5},
    character{'S', 0x53, {0x26, 0x49, 0x49, 0x49, 0x32}, 5},
    character{'T', 0x54, {0x1, 0x1, 0x7f, 0x1, 0x1}, 5},
    character{'U', 0x55, {0x3f, 0x40, 0x40, 0x40, 0x3f}, 5},
    character{'V', 0x56, {0x1f, 0x20, 0x40, 0x20, 0x1f}, 5},
    character{'W', 0x57, {0x3f, 0x40, 0x38, 0x40, 0x3f}, 5},
    character{'X', 0x58, {0x63, 0x14, 0x8, 0x14, 0x63}, 5},
    character{'Y', 0x59, {0x7, 0x8, 0x70, 0x8, 0x7}, 5},
    character{'Z', 0x5a, {0x61, 0x51, 0x49, 0x45, 0x43}, 5},
    character{'-', 0x2d, {0x8, 0x8, 0x8, 0x8, 0x8}, 5},
    character{'!', 0x21 ,{0x5f}, 1},
    character{'.', 0x2e, {0x40}, 1},
    character{'1', 0x31, {0x42, 0x42, 0x7f, 0x40, 0x40}, 5},
    character{'2', 0x32, {0x62, 0x51, 0x49, 0x45, 0x42}, 5},
    character{'3', 0x33, {0x22, 0x41, 0x49, 0x49, 0x3e}, 5},
    character{'4', 0x34, {0x1f, 0x10, 0x7c, 0x10, 0x10}, 5},
    character{'5', 0x35, {0x4f, 0x49, 0x49, 0x49, 0x31}, 5},
    character{'6', 0x36, {0x3e, 0x49, 0x49, 0x49, 0x32}, 5},
    character{'7', 0x37, {0x1, 0x1, 0x79, 0x5, 0x3}, 5},
    character{'8', 0x38, {0x36, 0x49, 0x49, 0x49, 0x36}, 5},
    character{'9', 0x39, {0x26, 0x49, 0x49, 0x49, 0x3e}, 5},
    character{'0', 0x30, {0x3e, 0x41, 0x41, 0x41, 0x3e}, 5},
    character{'+', 0x2b, {0x8, 0x8, 0x3e, 0x8, 0x8}, 5},
    character{':', 0x3a, {0x36, 0x36}, 2},
    character{'=', 0x3d, {0x14, 0x14, 0x14, 0x14, 0x14}, 5},
    character{' ', 0x20, {0x0, 0x0}, 2},
    character{'a', 0x61, {0x20, 0x54, 0x54, 0x54, 0x78}, 5},
    character{'b', 0x62, {0x7f, 0x50, 0x50, 0x50, 0x20}, 5},
    character{'c', 0x63, {0x38, 0x44, 0x44, 0x44, 0x28}, 5},
    character{'d', 0x64, {0x20, 0x50, 0x50, 0x50, 0x7f}, 5},
    character{'e', 0x65, {0x38, 0x54, 0x54, 0x54, 0x48}, 5},
    character{'f', 0x66, {0x8, 0x7e, 0x9, 0x1, 0x2}, 5},
    character{'g', 0x67, {0x48, 0x54, 0x54, 0x54, 0x38}, 5},
    character{'h', 0x68, {0x7f, 0x8, 0x8, 0x8, 0x70}, 5},
    character{'i', 0x69, {0x44, 0x7d, 0x40}, 3},
    character{'j', 0x6a, {0x20, 0x40, 0x44, 0x3d}, 4},
    character{'k', 0x6b, {0x7f, 0x10, 0x10, 0x28, 0x44}, 5},
    character{'l', 0x6c, {0x41, 0x7f, 0x40}, 3},
    character{'m', 0x6d, {0x7c, 0x4, 0x7c, 0x4, 0x78}, 5},
    character{'n', 0x6e, {0x7c, 0x4, 0x4, 0x4, 0x78}, 5},
    character{'o', 0x6f, {0x38, 0x44, 0x44, 0x44, 0x38}, 5},
    character{'p', 0x70, {0x7c, 0x14, 0x14, 0x14, 0x8}, 5},
    character{'q', 0x71, {0x8, 0x14, 0x14, 0x14, 0x7c}, 5},
    character{'r', 0x72, {0x7c, 0x8, 0x4, 0x4, 0x4}, 5},
    character{'s', 0x73, {0x48, 0x54, 0x54, 0x54, 0x24}, 5},
    character{'t', 0x74, {0x2, 0x3f, 0x42, 0x40}, 4},
    character{'u', 0x75, {0x3c, 0x40, 0x40, 0x20, 0x7c}, 5},
    character{'v', 0x76, {0x1c, 0x20, 0x40, 0x20, 0x1c}, 5},
    character{'w', 0x77, {0x7c, 0x20, 0x70, 0x20, 0x7c}, 5},
    character{'x', 0x78, {0x44, 0x28, 0x10, 0x28, 0x44}, 5},
    character{'y', 0x79, {0x4c, 0x50, 0x50, 0x50, 0x3c}, 5},
    character{'z', 0x7a, {0x44, 0x64, 0x54, 0x4c, 0x44}, 5},
    character{'[', 0x5b, {0x7f, 0x41, 0x41}, 3},
    character{']', 0x5d, {0x41, 0x41, 0x7f}, 3},
    character{'{', 0x7b, {0x8, 0x8, 0x36, 0x41, 0x41}, 5},
    character{'}', 0x7d, {0x41, 0x41, 0x36, 0x8, 0x8}, 5},
    character{'(', 0x28, {0x1c, 0x22, 0x41}, 3},
    character{')', 0x29, {0x41, 0x22, 0x1c}, 3},
    character{'@', 0x40, {0x3e, 0x41, 0x5d, 0x55, 0x1e}, 5},
    character{'#', 0x23, {0x14, 0x3e, 0x14, 0x3e, 0x14}, 5},
    character{'$', 0x24, {0x2c, 0x2a, 0x7f, 0x2a, 0x12}, 5},
    character{'%', 0x25, {0x26, 0x16, 0x8, 0x34, 0x32}, 5},
    character{'^', 0x5e, {0x4, 0x2, 0x1, 0x2, 0x4}, 5},
    character{'_', 0x5f, {0x40, 0x40, 0x40, 0x40, 0x40}, 5},
    character{'\'', 0x27, {0x7}, 1},
    character{'"', 0x22, {0x7, 0x0, 0x7}, 3},
    character{';', 0x3b, {0x40, 0x76, 0x36}, 3},
    character{'/', 0x2f, {0x20, 0x10, 0x8, 0x4, 0x2}, 5},
    character{'\\', 0x5c, {0x2, 0x4, 0x8, 0x10, 0x20}, 5},
    character{'<', 0x3c, {0x10, 0x28, 0x44}, 3},
    character{'>', 0x3e, {0x44, 0x28, 0x10}, 3},
    character{'*', 0x2a, {0x12, 0xc, 0x3f, 0xc, 0x12}, 5},
    character{'`', 0x60, {0x1, 0x2}, 2},
    character{'~', 0x7e, {0x2, 0x1, 0x1, 0x3, 0x2, 0x2, 0x1}, 7},
    character{'&', 0x26, {0x30, 0x4a, 0x45, 0x2a, 0x10, 0x28}, 6},
    character{'\n', 0x0a, {}, 0},
    character{'\r', 0x0d, {}, 0}
};


character findCorrespondingByte(uint8_t ascii_code){
    unsigned short int total_characters = sizeof(characters) / sizeof(*characters);
	character temp;
	
    for (unsigned short int i = 0; i < total_characters; i++) {
		//Retrieve character from FLASH MEMORY
		memcpy_P(&temp, &characters[i], sizeof(character));
        if (temp.ascii_code == ascii_code) return temp;
	}
	memcpy_P(&temp, &characters[0], sizeof(character));
    return temp; // if nothing is found, then return question mark (?).
}

#endif

